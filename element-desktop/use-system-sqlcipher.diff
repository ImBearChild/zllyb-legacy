diff -up element-desktop-1.10.12/hak/matrix-seshat/build.ts.orig element-desktop-1.10.12/hak/matrix-seshat/build.ts
--- element-desktop-1.10.12/hak/matrix-seshat/build.ts.orig	2022-05-10 22:30:21.000000000 +0800
+++ element-desktop-1.10.12/hak/matrix-seshat/build.ts	2022-05-14 20:32:29.240937137 +0800
@@ -26,7 +26,7 @@ export default async function(hakEnv: Ha
     if (hakEnv.isWin()) {
         await buildOpenSslWin(hakEnv, moduleInfo);
         await buildSqlCipherWin(hakEnv, moduleInfo);
-    } else {
+    } else if (hakEnv.isMac()) {
         await buildSqlCipherUnix(hakEnv, moduleInfo);
     }
     await buildMatrixSeshat(hakEnv, moduleInfo);
@@ -179,17 +179,12 @@ async function buildSqlCipherUnix(hakEnv
         '--prefix=' + moduleInfo.depPrefix + '',
         '--enable-tempstore=yes',
         '--enable-shared=no',
-        '--enable-tcl=no',
     ];
 
     if (hakEnv.isMac()) {
         args.push('--with-crypto-lib=commoncrypto');
     }
 
-    if (hakEnv.isLinux()) {
-        args.push('--with-pic=yes');
-    }
-
     if (!hakEnv.isHost()) {
         // In the nonsense world of `configure`, it is assumed you are building
         // a compiler like `gcc`, so the `host` option actually means the target
@@ -270,29 +265,12 @@ async function buildMatrixSeshat(hakEnv:
     // it for now: we should confirm how much of this it still actually needs.
     const env = hakEnv.makeGypEnv();
 
-    Object.assign(env, {
-        SQLCIPHER_STATIC: 1,
-        SQLCIPHER_LIB_DIR: path.join(moduleInfo.depPrefix, 'lib'),
-        SQLCIPHER_INCLUDE_DIR: path.join(moduleInfo.depPrefix, 'include'),
-    });
-
-    if (hakEnv.isLinux()) {
-        // Ensure Element uses the statically-linked seshat build, and prevent other applications
-        // from attempting to use this one. Detailed explanation:
-        //
-        // RUSTFLAGS
-        //     An environment variable containing a list of arguments to pass to rustc.
-        // -Clink-arg=VALUE
-        //     A rustc argument to pass a single argument to the linker.
-        // -Wl,
-        //     gcc syntax to pass an argument (from gcc) to the linker (ld).
-        // -Bsymbolic:
-        //     Prefer local/statically linked symbols over those in the environment.
-        //     Prevent overriding native libraries by LD_PRELOAD etc.
-        // --exclude-libs ALL
-        //     Prevent symbols from being exported by any archive libraries.
-        //     Reduces output filesize and prevents being dynamically linked against.
-        env.RUSTFLAGS = '-Clink-arg=-Wl,-Bsymbolic -Clink-arg=-Wl,--exclude-libs,ALL';
+    if (!hakEnv.isLinux()) {
+        Object.assign(env, {
+            SQLCIPHER_STATIC: 1,
+            SQLCIPHER_LIB_DIR: path.join(moduleInfo.depPrefix, 'lib'),
+            SQLCIPHER_INCLUDE_DIR: path.join(moduleInfo.depPrefix, 'include'),
+        });
     }
 
     if (hakEnv.isWin()) {
diff -up element-desktop-1.10.12/hak/matrix-seshat/check.ts.orig element-desktop-1.10.12/hak/matrix-seshat/check.ts
--- element-desktop-1.10.12/hak/matrix-seshat/check.ts.orig	2022-05-10 22:30:21.000000000 +0800
+++ element-desktop-1.10.12/hak/matrix-seshat/check.ts	2022-05-14 20:32:29.240937137 +0800
@@ -22,19 +22,21 @@ import { DependencyInfo } from '../../sc
 
 export default async function(hakEnv: HakEnv, moduleInfo: DependencyInfo): Promise<void> {
     // of course tcl doesn't have a --version
-    await new Promise<void>((resolve, reject) => {
-        const proc = childProcess.spawn('tclsh', [], {
-            stdio: ['pipe', 'ignore', 'ignore'],
+    if (!hakEnv.isLinux()) {
+        await new Promise<void>((resolve, reject) => {
+            const proc = childProcess.spawn('tclsh', [], {
+                stdio: ['pipe', 'ignore', 'ignore'],
+            });
+            proc.on('exit', (code) => {
+                if (code !== 0) {
+                    reject("Can't find tclsh - have you installed TCL?");
+                } else {
+                    resolve();
+                }
+            });
+            proc.stdin.end();
         });
-        proc.on('exit', (code) => {
-            if (code !== 0) {
-                reject("Can't find tclsh - have you installed TCL?");
-            } else {
-                resolve();
-            }
-        });
-        proc.stdin.end();
-    });
+    }
 
     const tools = [
         ['rustc', '--version'],
diff -up element-desktop-1.10.12/hak/matrix-seshat/fetchDeps.ts.orig element-desktop-1.10.12/hak/matrix-seshat/fetchDeps.ts
--- element-desktop-1.10.12/hak/matrix-seshat/fetchDeps.ts.orig	2022-05-10 22:30:21.000000000 +0800
+++ element-desktop-1.10.12/hak/matrix-seshat/fetchDeps.ts	2022-05-14 20:32:29.240937137 +0800
@@ -25,7 +25,9 @@ import HakEnv from '../../scripts/hak/ha
 import { DependencyInfo } from '../../scripts/hak/dep';
 
 export default async function(hakEnv: HakEnv, moduleInfo: DependencyInfo): Promise<void> {
-    await getSqlCipher(hakEnv, moduleInfo);
+    if (!hakEnv.isLinux()) {
+        await getSqlCipher(hakEnv, moduleInfo);
+    }
 
     if (hakEnv.isWin()) {
         await getOpenSsl(hakEnv, moduleInfo);
